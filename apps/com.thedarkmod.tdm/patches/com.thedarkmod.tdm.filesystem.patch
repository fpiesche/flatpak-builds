diff --git a/idlib/StdFilesystem.cpp b/idlib/StdFilesystem.cpp
index 56d8921f2..6e3b56fa9 100644
--- a/idlib/StdFilesystem.cpp
+++ b/idlib/StdFilesystem.cpp
@@ -20,29 +20,29 @@ Project: The Dark Mod (http://www.thedarkmod.com/)
 	#if _MSC_VER < 1910
 		//STL-based implementation for MSVC2013
 		#include <filesystem>
-		namespace stdfsys = std::tr2::sys;
+		namespace filesystem = std::tr2::sys;
 	#else // MSVC 2017+
 		#if _HAS_CXX17
 			#include <filesystem>
-			namespace stdfsys = std::filesystem;
+			namespace filesystem = filesystem;
 		#else
 			#define _SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING
 			#include <experimental/filesystem>
-			namespace stdfsys = std::experimental::filesystem;
+			namespace filesystem = std::experimental::filesystem;
 		#endif
 	#endif 
 #else
 	//it should be here for both GCC and Clang
-	#include <experimental/filesystem>
-	namespace stdfsys = std::experimental::filesystem::v1;
+	#include <filesystem>
+	namespace filesystem = std::filesystem::v1;
 #endif
 
 namespace stdext {
-	struct path_impl : public stdfsys::path {
-		path_impl() : stdfsys::path() {}
-		path_impl(const char* str) : stdfsys::path(str) {}
-		path_impl(const std::string &str) : stdfsys::path(str) {}
-		path_impl(const stdfsys::path &path) : stdfsys::path(path) {}
+	struct path_impl : public filesystem::path {
+		path_impl() : filesystem::path() {}
+		path_impl(const char* str) : filesystem::path(str) {}
+		path_impl(const std::string &str) : filesystem::path(str) {}
+		path_impl(const filesystem::path &path) : filesystem::path(path) {}
 	};
 	path_impl &get(path &path) {
 		return *path.d;
@@ -104,62 +103,62 @@ namespace stdext {
 
 	bool is_directory(const path &path) {
 		bool res;
-		try {	res = stdfsys::is_directory(get(path)); }
-		catch(stdfsys::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
+		try {	res = filesystem::is_directory(get(path)); }
+		catch(filesystem::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
 		return res;
 	}
 	bool create_directory(const path &path) {
 		bool res;
-		try {	res = stdfsys::create_directory(get(path)); }
-		catch(stdfsys::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
+		try {	res = filesystem::create_directory(get(path)); }
+		catch(filesystem::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
 		return res;
 	}
 	bool exists(const path &path) {
 		bool res;
-		try {	res = stdfsys::exists(get(path)); }
-		catch(stdfsys::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
+		try {	res = filesystem::exists(get(path)); }
+		catch(filesystem::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
 		return res;
 	}
 	bool create_directories(const path &path) {
 		bool res;
-		try {	res = stdfsys::create_directories(get(path)); }
-		catch(stdfsys::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
+		try {	res = filesystem::create_directories(get(path)); }
+		catch(filesystem::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
 		return res;
 	}
 	bool remove(const path &path) {
 		bool res;
-		try {	res = stdfsys::remove(get(path)); }
-		catch(stdfsys::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
+		try {	res = filesystem::remove(get(path)); }
+		catch(filesystem::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
 		return res;
 	}
 	uint64_t file_size(const path &path) {
 		uint64_t res;
-		try {	res = stdfsys::file_size(get(path)); }
-		catch(stdfsys::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
+		try {	res = filesystem::file_size(get(path)); }
+		catch(filesystem::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
 		return res;
 	}
 	uint64_t remove_all(const path& path) {
 		uint64_t res;
-		try {	res = stdfsys::remove_all(get(path)); }
-		catch(stdfsys::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
+		try {	res = filesystem::remove_all(get(path)); }
+		catch(filesystem::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
 		return res;
 	}
 	void copy_file(const path &from, const path &to) {
-		try {	stdfsys::copy_file(get(from), get(to)); }
-		catch(stdfsys::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
+		try {	filesystem::copy_file(get(from), get(to)); }
+		catch(filesystem::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
 	}
 	void rename(const path &from, const path &to) {
-		try {	stdfsys::rename(get(from), get(to)); }
-		catch(stdfsys::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
+		try {	filesystem::rename(get(from), get(to)); }
+		catch(filesystem::filesystem_error &e) { throw filesystem_error(e.what(), e.code()); }
 	}
 
 	std::vector<path> directory_enumerate(const path &rootPath) {
 		std::vector<path> res;
 		try {
-			for (auto iter = stdfsys::directory_iterator(get(rootPath)); iter != stdfsys::directory_iterator(); ++iter)
+			for (auto iter = filesystem::directory_iterator(get(rootPath)); iter != filesystem::directory_iterator(); ++iter)
 				res.push_back(path_impl(iter->path()));
 		}
-		catch(stdfsys::filesystem_error &e) {
+		catch(filesystem::filesystem_error &e) {
 			throw filesystem_error(e.what(), e.code());
 		}
 		return res;
@@ -167,10 +166,10 @@ namespace stdext {
 	std::vector<path> recursive_directory_enumerate(const path &rootPath) {
 		std::vector<path> res;
 		try {
-			for (auto iter = stdfsys::recursive_directory_iterator(get(rootPath)); iter != stdfsys::recursive_directory_iterator(); ++iter)
+			for (auto iter = filesystem::recursive_directory_iterator(get(rootPath)); iter != filesystem::recursive_directory_iterator(); ++iter)
 				res.push_back(path_impl(iter->path()));
 		}
-		catch(stdfsys::filesystem_error &e) {
+		catch(filesystem::filesystem_error &e) {
 			throw filesystem_error(e.what(), e.code());
 		}
 		return res;
