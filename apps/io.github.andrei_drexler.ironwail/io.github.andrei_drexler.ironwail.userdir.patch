diff --git a/Quake/host_cmd.c b/Quake/host_cmd.c
index 3d4615db..ea7e505a 100644
--- a/Quake/host_cmd.c
+++ b/Quake/host_cmd.c
@@ -23,6 +23,7 @@ Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 #include "quakedef.h"
 #include "q_ctype.h"
+#include "sys.h"
 #include "json.h"
 #include <time.h>
 #ifndef WITHOUT_CURL
@@ -1343,7 +1344,7 @@ void DemoList_Init (void)
 	// we don't want to list the demos in id1 pakfiles,
 	// because these are not "add-on" demos
 	q_snprintf (ignorepakdir, sizeof (ignorepakdir), "/%s/", GAMENAME);
-	
+
 	for (search = com_searchpaths; search; search = search->next)
 	{
 		if (*search->filename) //directory
@@ -1396,8 +1397,9 @@ void SaveList_Init (void)
 	char		dirname[MAX_OSPATH];
 	char		savename[MAX_QPATH];
 	findfile_t *find;
+	Sys_GetUserdir(dirname, MAX_OSPATH);
 
-	for (find = Sys_FindFirst (com_gamedir, "sav"); find; find = Sys_FindNext (find))
+	for (find = Sys_FindFirst (dirname, "sav"); find; find = Sys_FindNext (find))
 	{
 		if (find->attribs & FA_DIRECTORY)
 			continue;
@@ -1405,7 +1407,7 @@ void SaveList_Init (void)
 		FileList_Add (savename, &savelist);
 	}
 
-	if ((size_t) q_snprintf (dirname, sizeof (dirname), "%s/autosave", com_gamedir) < sizeof (dirname))
+	if ((size_t) q_snprintf (dirname, sizeof (dirname), "%s/autosave/%s", dirname, com_gamedir) < sizeof (dirname))
 	{
 		for (find = Sys_FindFirst (dirname, "sav"); find; find = Sys_FindNext (find))
 		{
@@ -1413,7 +1415,7 @@ void SaveList_Init (void)
 			if (find->attribs & FA_DIRECTORY)
 				continue;
 			COM_StripExtension (find->name, filename, sizeof (filename));
-			if ((size_t) q_snprintf (savename, sizeof (savename), "autosave/%s", filename) < sizeof (savename))
+			if ((size_t) q_snprintf (savename, sizeof (savename), "%s/autosave/%s/%s", dirname, com_gamedir, filename) < sizeof (savename))
 				FileList_Add (savename, &savelist);
 		}
 	}
@@ -2472,7 +2474,7 @@ Host_Loadgame_f
 static void Host_Loadgame_f (void)
 {
 	static char	*start;
-	
+
 	char	name[MAX_OSPATH];
 	char	relname[MAX_OSPATH];
 	char	mapname[MAX_QPATH];
@@ -2493,7 +2495,7 @@ static void Host_Loadgame_f (void)
 		Con_Printf ("load <savename> : load a game\n");
 		return;
 	}
-	
+
 	if (strstr(Cmd_Argv(1), ".."))
 	{
 		Con_Printf ("Relative pathnames are not allowed.\n");
@@ -2547,7 +2549,7 @@ static void Host_Loadgame_f (void)
 // avoid leaking if the previous Host_Loadgame_f failed with a Host_Error
 	if (start != NULL)
 		free (start);
-	
+
 	start = (char *) COM_LoadMallocFile_TextMode_OSPath(name, NULL);
 	if (start == NULL)
 	{
@@ -3781,4 +3783,3 @@ void Host_InitCommands (void)
 	Cmd_AddCommand ("viewnext", Host_Viewnext_f);
 	Cmd_AddCommand ("viewprev", Host_Viewprev_f);
 }
-
diff --git a/Quake/menu.c b/Quake/menu.c
index dd284089..569cf9b1 100644
--- a/Quake/menu.c
+++ b/Quake/menu.c
@@ -23,6 +23,7 @@ Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 #include "quakedef.h"
 #include "bgmusic.h"
 #include "q_ctype.h"
+#include "sys.h"
 
 #include <time.h>
 
@@ -1918,7 +1919,7 @@ void M_Maps_Draw (void)
 
 				M_PrintScroll (x + namecols*8, y + i*8, desccols*8, buf,
 					selected ? mapsmenu.ticker.scroll_time : 0.0, true);
-				
+
 				if (!message)
 					GL_SetCanvasColor (1, 1, 1, 1);
 			}
@@ -2063,10 +2064,12 @@ void M_SetSkillMenuMap (const char *name)
 void M_Menu_Skill_f (void)
 {
 	char autosave[MAX_OSPATH];
+	char dirname[MAX_OSPATH];
+	Sys_GetUserdir(dirname, MAX_OSPATH);
 
 	m_skill_canresume = false;
 	m_skill_lastplayed = 0;
-	q_snprintf (autosave, sizeof (autosave), "%s/autosave/%s.sav", com_gamedir, m_skill_mapname);
+	q_snprintf (autosave, sizeof (autosave), "%s/autosave/%s/%s.sav", dirname, com_gamedir, m_skill_mapname);
 	if (Sys_FileExists (autosave))
 	{
 		time_t now, lastplayed;
@@ -3246,7 +3249,7 @@ void M_Menu_Gamepad_f (void)
 
 #define PP_IGNORE_ARGS(...)
 
-enum 
+enum
 {
 	// Add option id's and BEGIN values
 	#define BEGIN_MENU_OPT(prefix, state, desc)		prefix##_BEGIN, _##prefix##_REWIND = prefix##_BEGIN - 1,
@@ -3725,9 +3728,9 @@ void M_AdjustSliders (int dir)
 			curr_alwaysrun = ALWAYSRUN_VANILLA;
 		else
 			curr_alwaysrun = ALWAYSRUN_OFF;
-			
+
 		target_alwaysrun = (ALWAYSRUN_ITEMS + curr_alwaysrun + dir) % ALWAYSRUN_ITEMS;
-			
+
 		if (target_alwaysrun == ALWAYSRUN_VANILLA)
 		{
 			Cvar_SetValue ("cl_alwaysrun", 0);
@@ -4323,7 +4326,7 @@ static void M_Options_DrawItem (int y, int item)
 		r = vid_contrast.value - 1.0;
 		M_DrawSlider (x, y, r, va ("%.0f", 10.f * r));
 		break;
-	
+
 	case OPT_MOUSESPEED:
 		r = (sensitivity.value - 1)/10;
 		M_DrawSlider (x, y, r, va ("%.1f", sensitivity.value));
@@ -4700,7 +4703,7 @@ void M_Options_Draw (void)
 
 	M_Options_UpdateLayout ();
 	M_List_Update (&optionsmenu.list);
-	
+
 	if (*optionsmenu.last_cursor != optionsmenu.list.cursor)
 	{
 		*optionsmenu.last_cursor = optionsmenu.list.cursor;
@@ -5345,14 +5348,14 @@ int		msgNumber;
 enum m_state_e	m_quit_prevstate;
 qboolean	wasInMenus;
 
-const char*const quitMessage [] = 
+const char*const quitMessage [] =
 {
 /* .........1.........2.... */
   "  Are you gonna quit    ",
   "  this game just like   ",
   "   everything else?     ",
   "                        ",
- 
+
   " Milord, methinks that  ",
   "   thou art a lowly     ",
   " quitter. Is this true? ",
@@ -5367,22 +5370,22 @@ const char*const quitMessage [] =
   "   for trying to quit!  ",
   "     Press Y to get     ",
   "      smacked out.      ",
- 
+
   " Press Y to quit like a ",
   "   big loser in life.   ",
   "  Press N to stay proud ",
   "    and successful!     ",
- 
+
   "   If you press Y to    ",
   "  quit, I will summon   ",
   "  Satan all over your   ",
   "      hard drive!       ",
- 
+
   "  Um, Asmodeus dislikes ",
   " his children trying to ",
   " quit. Press Y to return",
   "   to your Tinkertoys.  ",
- 
+
   "  If you quit now, I'll ",
   "  throw a blanket-party ",
   "   for you next time!   ",
@@ -6822,7 +6825,7 @@ static void M_ModInfo_UpdateLayout (void)
 	int			width = strlen (modinfomenu.title) * 12 + 16;
 	int			height = 0;
 	const char	*str;
-	
+
 	str = modinfomenu.author;
 	while (*str && height < MODINFO_MAXAUTHORLINES)
 	{
@@ -7563,4 +7566,3 @@ void M_CheckMods (void)
 	m_skill_usecustomtitle = M_CheckCustomGfx ("gfx/p_skill.lmp",
 		"gfx/ttl_sgl.lmp", 6728, sgl_hashes, countof (sgl_hashes));
 }
-
diff --git a/Quake/quakedef.h b/Quake/quakedef.h
index 5c519aa7..2e095c25 100644
--- a/Quake/quakedef.h
+++ b/Quake/quakedef.h
@@ -64,7 +64,7 @@ Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 #define ENGINE_PAK				"ironwail.pak"
 #define ENGINE_USERDIR_WIN		"Ironwail"
 #define ENGINE_USERDIR_OSX		"Ironwail"
-#define ENGINE_USERDIR_UNIX		".ironwail"
+#define ENGINE_USERDIR_UNIX		""
 
 //define	PARANOID			// speed sapping error checking
 
diff --git a/Quake/sys.h b/Quake/sys.h
index 57c9791a..71c50823 100644
--- a/Quake/sys.h
+++ b/Quake/sys.h
@@ -63,6 +63,9 @@ const char *Sys_GetEGSLauncherData (void);
 // (to avoid writing in Nightdive Studios/Quake)
 qboolean Sys_GetAltUserPrefDir (qboolean remastered, char *path, size_t pathsize);
 
+// User data directory
+void Sys_GetUserdir (char *dst, size_t dstsize);
+
 // shows path in file browser
 qboolean Sys_Explore (const char *path);
 
diff --git a/Quake/sys_sdl_unix.c b/Quake/sys_sdl_unix.c
index 15fed2f9..842fd1c0 100644
--- a/Quake/sys_sdl_unix.c
+++ b/Quake/sys_sdl_unix.c
@@ -444,21 +444,11 @@ static void Sys_GetUserdir (char *dst, size_t dstsize)
 	q_snprintf (dst, dstsize, "%s/%s", buffer, SYS_USERDIR);
 }
 #else
-static void Sys_GetUserdir (char *dst, size_t dstsize)
+void Sys_GetUserdir (char *dst, size_t dstsize)
 {
 	size_t		n;
 	const char	*home_dir = NULL;
-	struct passwd	*pwent;
-
-	pwent = getpwuid( getuid() );
-	if (pwent == NULL)
-		perror("getpwuid");
-	else
-		home_dir = pwent->pw_dir;
-	if (home_dir == NULL)
-		home_dir = getenv("HOME");
-	if (home_dir == NULL)
-		Sys_Error ("Couldn't determine userspace directory");
+	home_dir = getenv("XDG_DATA_HOME");
 
 /* what would be a maximum path for a file in the user's directory...
  * $HOME/SYS_USERDIR/game_dir/dirname1/dirname2/dirname3/filename.ext
