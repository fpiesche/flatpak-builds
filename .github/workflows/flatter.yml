---
name: Flatter

on:
  workflow_dispatch:
    inputs:
      appids:
        type: string
        description: app IDs to build
  push:
    paths:
      - "apps/*/*.yml"
    branches:
      - main
  pull_request:

jobs:
  builds:
    name: Assemble build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.builds.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed manifests
        if: ${{ github.event_name }} == "push"
        id: changed_files_action
        uses: tj-actions/changed-files@v45
        with:
          files: apps/*/*.yml
      - name: Assemble build matrix
        id: builds
        run: |
          # Figure out which manifests need building
          if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "pull_request" ]]; then
            APPS="${{ steps.changed_files_action.outputs.all_changed_files }}"
            echo "Building changed manifests: $APPS"
          elif [[ "${{ inputs.appids }}" != "" ]]; then
            APPS_TO_BUILD=(${{ inputs.appids }})
            declare -a APPS=()
            for appid in "${APPS_TO_BUILD[@]}"; do
              APPS+=($(find ./apps -name $appid.yml))
            done
            echo "Building specified apps: $APPS"
          else
            APPS="$(ls -1 apps/*/*.yml)"
            echo "Building all apps: $APPS"
          fi
          APP_LIST=($APPS)

          # Generate JSON matrix for build jobs
          MATRIX="{\
                    \"arch\": \
                    [ \
                      { \
                        \"name\": \"x86_64\", \
                        \"runner\": \"ubuntu-latest\" \
                      }, \
                      { \
                        \"name\": \"aarch64\", \
                        \"runner\": \"ubuntu-24.04-arm\"\
                      } \
                    ], \
                    \"app\": [] \
                  }"
          for manifest in "${APP_LIST[@]}"; do
            APPID=$(basename ${manifest%.*})
            echo "Generating matrix entry for $APPID..."
            MANIFEST_FILENAME="$manifest"
            MANIFEST_SDK=$(yq e ".sdk" $manifest | sed "s/org.\(.*\).Sdk/\1/" )
            MANIFEST_SDK_VERSION=$(yq e ".runtime-version" $manifest)
            METAINFO_FILE="${manifest%.*}.metainfo.xml"
            if [ -f apps/${APPID}/flathub.json ]; then
              echo "Reading required architectures from apps/${APPID}/flathub.json..."
              MANIFEST_ARCHES=$(jq '. | ."only-arches"' apps/${APPID}/flathub.json)
            else
              MANIFEST_ARCHES="[\"x86_64\", \"aarch64\"]"
            fi
            echo "::group::Variables"
            echo "MATRIX=$MATRIX"
            echo "APPID=$APPID"
            echo "MANIFEST_FILENAME=$MANIFEST_FILENAME"
            echo "MANIFEST_SDK=$MANIFEST_SDK"
            echo "MANIFEST_SDK_VERSION=$MANIFEST_SDK_VERSION"
            echo "MANIFEST_ARCHES=$MANIFEST_ARCHES"
            echo "METAINFO_FILE=$METAINFO_FILE"
            echo "::endgroup::"
            MATRIX=$(echo $MATRIX | \
              jq -c ".app[.app | length] |=
              .app + {
                      \"appid\": \"$APPID\",
                      \"manifest\": \"$MANIFEST_FILENAME\",
                      \"sdk\": \"$MANIFEST_SDK\",
                      \"sdk-version\": \"$MANIFEST_SDK_VERSION\",
                      \"only-arches\": \"$MANIFEST_ARCHES\",
                      \"metainfo\": \"$METAINFO_FILE\"
                    }")
          done
          echo "::group::Output"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo $MATRIX | jq
          echo "::endgroup::"

  metainfo-lint:
    name: ${{ matrix.app.appid }} appstream lint
    needs: builds
    strategy:
      matrix: ${{fromJson(needs.builds.outputs.matrix)}}
    runs-on: ${{ matrix.arch.runner }}
    container: ghcr.io/flathub/flatpak-builder-lint:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ github.ref }}
      - name: Check metainfo.xml
        run: flatpak-builder-lint --exceptions appstream "${{ matrix.app.metainfo_file }}"

  flatter:
    name: ${{ matrix.app.appid }} ${{ matrix.arch.name }} build
    needs:
      - builds
      - metainfo-lint
    runs-on: ${{ matrix.arch.runner }}
    container:
      image: ghcr.io/andyholmes/flatter/${{ matrix.app.sdk }}:${{ matrix.app.sdk-version }}
      options: --privileged
    permissions:
      pages: write
      id-token: write
      contents: write
    strategy:
      matrix: ${{fromJson(needs.builds.outputs.matrix)}}
    steps:
      - name: Checkout
        if: ${{ contains(matrix.app.only-arches, matrix.arch.name) }}
        uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ github.ref }}
      - name: Setup GPG
        if: ${{ contains(matrix.app.only-arches, matrix.arch.name) }}
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Build
        if: ${{ contains(matrix.app.only-arches, matrix.arch.name) }}
        id: flatpak
        uses: andyholmes/flatter@main
        with:
          files: ${{ matrix.app.manifest }}
          flatpak-build-bundle-args: |
            --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo
          flatpak-builder-args: |
            --install-deps-from=flathub
          arch: ${{ matrix.arch.name }}
          gpg-sign: ${{ steps.gpg.outputs.fingerprint }}
          upload-bundles: false
      - name: Upload build dir as artifact
        if: ${{ contains(matrix.app.only-arches, matrix.arch.name) }}
        uses: actions/upload-artifact@v4
        with:
          path: _build
          name: ${{ matrix.app.appid }}_${{ matrix.arch.name }}_builddir.zip
      - name: Upload repo as artifact
        if: ${{ contains(matrix.app.only-arches, matrix.arch.name) }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.flatpak.outputs.repository }}
          name: ${{ matrix.app.appid }}_${{ matrix.arch.name }}_repo.zip
      - name: Build single-file bundle
        if: ${{ contains(matrix.app.only-arches, matrix.arch.name) }}
        run: |
          flatpak build-bundle \
            "${{ steps.flatpak.outputs.repository }}" \
            "${{ matrix.app.appid }}_${{ matrix.arch.name }}.flatpak" \
            "${{ matrix.app.appid }}"
      - name: Upload bundle as artifact
        if: ${{ contains(matrix.app.only-arches, matrix.arch.name) }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ matrix.app.appid }}_${{ matrix.arch.name }}.flatpak
          name: ${{ matrix.app.appid }}_${{ matrix.arch.name }}.flatpak

  builddir-lint:
    name: ${{ matrix.app.appid }} ${{ matrix.arch.name }} builddir lint
    needs:
      - builds
      - flatter
    runs-on: ${{ matrix.arch.runner }}
    container: ghcr.io/flathub/flatpak-builder-lint:latest
    strategy:
      matrix: ${{fromJson(needs.builds.outputs.matrix)}}
    steps:
      - name: Download ${{ matrix.app.appid }}_${{ matrix.arch.name }}_builddir.zip
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.app.appid }}_${{ matrix.arch.name }}_builddir.zip
          path: _build
      - name: Lint build dir
        run: flatpak-builder-lint --exceptions builddir _build
      - name: Delete builddir artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: "*_builddir.zip"

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: builddir-lint
    container:
      image: node:current-alpine
    permissions:
      pages: write
      contents: write
    environment:
      name: github-pages
    concurrency:
      group: repo-update
      cancel-in-progress: false
    steps:
      - name: Install required packages
        run: |
          apk update && apk add --no-cache \
            util-linux-misc bash \
            jinja2-cli xmlstarlet gpg gpg-agent \
            git rsync \
            flatpak
      - name: Check out base repo
        uses: actions/checkout@v4
      - name: Check out current Flatpak repo
        uses: actions/checkout@v4
        with:
          ref: refs/heads/gh-pages
          path: _site/repo/
      - name: Grab build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*_repo.zip"
          path: _site/repo
          merge-multiple: true
      - name: Setup GPG
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Assemble web listings
        shell: bash
        run: |
          mkdir -p _site/apps
          for file in apps/*/*.metainfo.xml; do
            xmlstarlet tr _templates/app_page.xsl $file > _site/apps/$(basename $file);
          done
          rename ".metainfo.xml" ".html" ./_site/apps/*.metainfo.xml
      - name: Generate Flatpak repository and app reference files
        shell: bash
        run: |
          gpg --export florian@yellowkeycard.net | base64 -w 0 > _site/ykc.gpg
          for app in $(ls -1 apps); do
            if [[ "$app" != "shared-modules" ]]; then
              jinja2 \
                -D app_id="$app" \
                -D app_name="$(xmlstarlet sel -t -v //component/name apps/$app/$app.metainfo.xml)" \
                -D gpg_key="$(gpg --export florian@yellowkeycard.net | base64 -w 0)" \
                -o _site/apps/${app}.flatpakref \
                _templates/app.flatpakref.j2
            fi
          done
          jinja2 \
            -D gpg_key="$(gpg --export florian@yellowkeycard.net | base64 -w 0)" \
            -o _site/ykc.flatpakrepo \
            _templates/ykc.flatpakrepo.j2
      - name: Generate index.html file
        run: |
          touch _site/index.html
          npm i markdown-to-html-cli -g
          markdown-to-html \
            --source README.md \
            --output _site/index.html \
            --title "yellow keycard flatpak repo" \
            --description "Various things missing from Flathub" \
            --github-corners "https://github.com/fpiesche/flatpak-builds"
      - name: Update repo metadata
        run: |
          flatpak build-update-repo \
            --default-branch=main \
            --gpg-sign=${{ steps.gpg.outputs.fingerprint }} \
            --title="Yellow Keycard" \
            --homepage="https://flatpak.yellowkeycard.net" \
            --verbose \
            _site/repo/
      - name: Publish repo
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: _site
      - name: Delete repo artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: "*_repo.zip"
