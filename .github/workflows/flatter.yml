name: Flatter

on:
  workflow_dispatch:
    inputs:
      publish:
        type: boolean
        description: Publish builds
      appids:
        type: string
        description: app IDs to build
  push:
    paths:
      - "apps/*/*.yml"
    branches:
      - main
  pull_request:

jobs:
  builds:
    name: Assemble build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.builds.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed manifests
        if: ${{ github.event_name }} == "push"
        id: changed_files_action
        uses: tj-actions/changed-files@v45
        with:
          files: apps/*/*.yml

      - name: Assemble build matrix
        id: builds
        run: |
          # Figure out which manifests need building
          if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "pull_request" ]]; then
            APPS="${{ steps.changed_files_action.outputs.all_changed_files }}"
            echo "Building changed manifests: $APPS"
          elif [[ "${{ inputs.appids }}" != "" ]]; then
            APPS_TO_BUILD=(${{ inputs.appids }})
            declare -a APPS=()
            for appid in "${APPS_TO_BUILD[@]}"; do
              APPS+=($(find ./apps -name $appid.yml))
            done
            echo "Building specified apps: $APPS"
          else
            APPS="$(ls -1 apps/*/*.yml)"
            echo "Building all apps: $APPS"
          fi
          APP_LIST=($APPS)

          # Generate JSON matrix for build jobs
          MATRIX="{\"arch\": [\"x86_64\", \"aarch64\"], \"app\": []}"
          for manifest in "${APP_LIST[@]}"; do
            APPID=$(basename ${manifest%.*})
            echo "Generating matrix entry for $APPID..."
            MANIFEST_FILENAME="$manifest"
            MANIFEST_SDK=$(yq e ".sdk" $manifest | sed "s/org.\(.*\).Sdk/\1/" )
            MANIFEST_SDK_VERSION=$(yq e ".runtime-version" $manifest)
            if [ -f apps/${APPID}/flathub.json ]; then
              MANIFEST_ARCHES=$(jq '. | ."only-arches"' apps/${APPID}/flathub.json)
            else
              MANIFEST_ARCHES="[\"x86_64\", \"aarch64\"]"
            fi
            MATRIX=$(echo $MATRIX | jq -c ".app[.app | length] |= .app + {\"appid\": \"$APPID\", \"manifest\": \"$MANIFEST_FILENAME\", \"sdk\": \"$MANIFEST_SDK\", \"sdk-version\": \"$MANIFEST_SDK_VERSION\", \"only-arches\": $MANIFEST_ARCHES}")
          done
          echo "::group::Output"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo $MATRIX | jq
          echo "::endgroup::"

  flatter:
    name: ${{ matrix.app.appid }} ${{ matrix.arch }}
    needs: builds
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/andyholmes/flatter/${{ matrix.app.sdk }}:${{ matrix.app.sdk-version }}
      options: --privileged
    permissions:
      pages: write
      id-token: write
      contents: write

    strategy:
      matrix: ${{fromJson(needs.builds.outputs.matrix)}}

    steps:
      - name: Checkout
        if: ${{ contains(matrix.app.only-arches, matrix.arch) }}
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup QEMU
        if: ${{ contains(matrix.app.only-arches, matrix.arch) && matrix.arch == 'aarch64' }}
        id: qemu
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Setup GPG
        if: ${{ contains(matrix.app.only-arches, matrix.arch) }}
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Build
        if: ${{ contains(matrix.app.only-arches, matrix.arch) }}
        id: flatpak
        uses: andyholmes/flatter@main
        with:
          files: ${{ matrix.app.manifest }}
          flatpak-build-bundle-args: |
            --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo
          flatpak-builder-args: |
            --install-deps-from=flathub
          arch: ${{ matrix.arch }}
          gpg-sign: ${{ steps.gpg.outputs.fingerprint }}
          upload-bundles: false
          # upload-pages-includes: ${{ steps.weblisting-files.outputs.files }}
          # upload-pages-artifact: ${{ matrix.arch == 'aarch64' }}

      - name: Upload build as artifact
        if: ${{ contains(matrix.app.only-arches, matrix.arch) }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.flatpak.outputs.repository }}
          name: ${{ matrix.app.appid }}_${{ matrix.arch }}

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: flatter
    container:
      image: node:current-alpine
    permissions:
      pages: write
      contents: write
    environment:
      name: github-pages

    steps:
      - name: Determine whether to publish
        run: |
          PUBLISH=false
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ inputs.publish }}" == "true" ]]; then PUBLISH=true; fi
          echo PUBLISH=$PUBLISH >> $GITHUB_ENV

      - name: Install required packages
        if: ${{ env.PUBLISH }} == "true"
        run: |
          apk update && apk add --no-cache \
            util-linux-misc bash \
            jinja2-cli xmlstarlet gpg gpg-agent \
            git rsync

      - name: Checkout
        if: ${{ env.PUBLISH }} == "true"
        uses: actions/checkout@v4

      - name: Get build artifacts
        if: ${{ env.PUBLISH }} == "true"
        uses: actions/download-artifact@v4
        with:
          path: _site
          merge-multiple: true

      - name: Setup GPG
        if: ${{ env.PUBLISH }} == "true"
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Assemble web listings
        if: ${{ env.PUBLISH }} == "true"
        shell: bash
        run: |
          mkdir -p _site/app
          find apps -name "*.metainfo.xml" -exec cp {} ./_site/ \;
          rename ".metainfo.xml" "" ./_site/app/*.metainfo.xml

      - name: Generate Flatpak repository and app reference files
        if: ${{ env.PUBLISH }} == "true"
        shell: bash
        run: |
          gpg --export florian@yellowkeycard.net | base64 -w 0 > _site/ykc.gpg
          for app in $(ls -1 apps); do
            if [[ "$app" != "shared-modules" ]]; then
              jinja2 \
                -D app_id="$app" \
                -D app_name="$(xmlstarlet sel -t -v //component/name apps/$app/$app.metainfo.xml)" \
                -D gpg_key="$(gpg --export florian@yellowkeycard.net | base64 -w 0)" \
                -o _site/${app}.flatpakref \
                _templates/app.flatpakref.j2
            fi
          done
          jinja2 \
            -D gpg_key="$(gpg --export florian@yellowkeycard.net | base64 -w 0)" \
            -o _site/ykc.flatpakrepo \
            _templates/ykc.flatpakrepo.j2

      - name: Generate index.html file
        if: ${{ env.PUBLISH }} == "true"
        run: |
          touch _site/index.html
          npm i markdown-to-html-cli -g
          markdown-to-html \
            --source README.md \
            --output _site/index.html \
            --title "retrogame flathub repo" \
            --description "Various things missing from Flathub" \
            --github-corners "https://github.com/fpiesche/flatpak-builds"

      - name: Publish repo
        if: ${{ env.PUBLISH }} == "true"
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: _site
